// Works assuming mem[65] = p8, mem[66] = p4, mem[67] = p2, mem[68] = p1, mem[69] = p0
// Counter stored at mem[64]
ADD r0, r0, #1
LS r0, #6                       // r0 = 64
STR r3, r0                      // Store initial counter
Loop:
RS r0, #8                       // r0 = 0
ADD r0, r0, #1                  // r0 = 1
LS r0, #2                       // r0 = 4 
LW r1, r3                       // Loads first half of message
AND r2, r0, r1                  // r2 & 4
RS r2, #2                      

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                 // r0 = 2
LW r0, r0
AND r0, r1, r0
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1                              // r0 = 1
LW r0, r0
AND r0, r0, r1
XOR r2, r2, r0

ADD r3, r3, #1                                  // increment index
RS r0, #8
ADD r0, r0, #1
LS r0, #7                                        // r0 = 128
LW r0, r0
LW r1, r3                                       // load second half of message
AND r0, r0, r1
RS r0, #7
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                                        // r0 = 64
LW r0, r0
AND r0, r0, r1
RS r0, #6
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #5                                        // r0 = 32
LW r0, r0
AND r0, r0, r1
RS r0, #5
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #4                                        // r0 = 16
LW r0, r0
AND r0, r0, r1
RS r0, #4
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #1                      // r0 = mem[65]
STR r2, r0                          // store p8

RS r0, #8
ADD r0, r0, #1
LS r0, #6                           // r0 = mem[64]
LW r3, r0                           // load counter index
LW r1, r3                           // load first half of message

RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
LW r0, r0
AND r2, r1, r0
RS r2, #2

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                        // r0 = 2
LW r0, r0
AND r0, r1, r0
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1                                       // r0 = 1
LW r0, r0
AND r0, r1, r0
XOR r2, r2, r0

ADD r3, r3, #1                                  // increment index
LW r1, r3                                       // load second half of message
RS r0, #8
ADD r0, r0, #1
LS r0, #7                                        // r0 = 128
LW r0, r0
AND r0, r0, r1
RS r0, #7
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #3                                        // r0 = 8
LW r0, r0
AND r0, r0, r1
RS r0, #3
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
LW r0, r0
AND r0, r0, r1
RS r0, #2
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                        // r0 = 2
LW r0, r0
AND r0, r0, r1
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #2                      // r0 = mem[66]
STR r2, r0                          // store p4

RS r0, #8
ADD r0, r0, #1
LS r0, #6                           // r0 = mem[64]
LW r3, r0                           // load counter index
LW r1, r3                           // load first half of message

RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
LW r0, r0
AND r2, r1, r0
RS r2, #2

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                        // r0 = 2
LW r0, r0
AND r0, r1, r0
RS r0, #1
XOR r2, r2, r0

ADD r3, r3, #1                                  // increment index
LW r1, r3                                       // load second half of message
RS r0, #8
ADD r0, r0, #1
LS r0, #6                                        // r0 = 64
LW r0, r0
AND r0, r0, r1
RS r0, #6
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #5                                        // r0 = 32
LW r0, r0
AND r0, r0, r1
RS r0, #5
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #3                                        // r0 = 8
LW r0, r0
AND r0, r0, r1
RS r0, #3
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
LW r0, r0
AND r0, r0, r1
RS r0, #2
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1                                        // r0 = 1
LW r0, r0
AND r0, r0, r1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #3                      // r0 = mem[67]
STR r2, r0                          // store p2

RS r0, #8
ADD r0, r0, #1
LS r0, #6                           // r0 = mem[64]
LW r3, r0                           // load counter index
LW r1, r3                           // load first half of message
RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
AND r2, r0, r1
RS r2, #2 

RS r0, #8
ADD r0, r0, #1                                      // r0 = 1
LW r0, r0
AND r0, r0, r1
XOR r2, r2, r0

ADD r3, r3, #1                                  // increment index
LW r1, r3                                       // load second half of message
RS r0, #8
ADD r0, r0, #1
LS r0, #6                                        // r0 = 64
LW r0, r0
AND r0, r0, r1
RS r0, #6
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #4                                        // r0 = 16
LW r0, r0
AND r0, r0, r1
RS r0, #4
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #3                                        // r0 = 8
LW r0, r0
AND r0, r0, r1
RS r0, #3
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                        // r0 = 2
LW r0, r0
AND r0, r0, r1
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1                                       // r0 = 1
LW r0, r0
AND r0, r0, r1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #3                      
ADD r0, r0, #1                                  // r0 = mem[68]
STR r2, r0                                      // store p1

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #1                                 // r0 = mem[65]
LW r2, r0                                      // load p8 -> b11:b5

LW r1, r3                                       // load second half of message
RS r0, #8
ADD r0, r0, #1
LS r0, #3                                        // r0 = 8
LW r0, r0
AND r0, r0, r1
RS r0, #3
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #2                                        // r0 = 4
LW r0, r0
AND r0, r0, r1
RS r0, #2
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #1                                        // r0 = 2
AND r0, r0, r1
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1                                       // r0 = 1
AND r0, r0, r1
RS r0, #1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #1                                 // r0 = mem[65]
LW r0, r0                                       // load p8
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #2                                 // r0 = mem[66]
LW r0, r0                                       // load p4
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #3                                 // r0 = mem[67]
LW r0, r0                                       // load p2
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #3
ADD r0, r0, #1                                 // r0 = mem[68]
LW r0, r0                                       // load p1
XOR r2, r2, r0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                         
ADD r0, r0, #3
ADD r0, r0, #2                                 // r0 = mem[69]
STR r2, r0                                      // store p0

RS r0, #8
ADD r0, r0, #1
LS r0, #6                           // r0 = mem[64]
LW r3, r0                           // load counter index
LW r2, r3                           // load first half of message
ADD r3, r3, 1                       // increment index
LW r1, r3                           // load second half of the message

ADD r0, r0, #1                          // r0 = mem[65]
LW r0, r0                               // load p8

LS r2, #5
RS r1, #3
XOR r2, r2, r1
RS r2, #1
LS r2, #1
XOR r2, r2, r0

ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #2                       // Adds 30 since r3 = index+1 already
STR r2, r3                           // store first half of message

RS r0, #8
ADD r0, r0, #1
LS r0, #6                            // r3 = mem[64]
LW r3, r3                           // load counter index
ADD r3, r3, #1                      // increment index
LW r0, r3                          // load second half of message
LW r2, r3                          // load second half of message

RS r0, #1
LS r0, #5

LS r1, #7
RS r1, #7

RS r3, #8
ADD r3, r3, #1
LS r3, #6                            
ADD r3, r3, #2                     // r3 = mem[66]
LW r2, r3
LS r2, #1
XOR r1, r1, r2
LS r1, #1

ADD r3, r3, #1                      // r3 = mem[67]
LW r2, r3
XOR r1, r1, r2
LS r1, #1

ADD r3, r3, #1                      // r3 = mem[68]
LW r2, r3
XOR r1, r1, r2
LS r1, #1

ADD r3, r3, #1                      // r3 = mem[69]
LW r2, r3
XOR r1, r1, r2
XOR r0, r0, r1

RS r3, #8
ADD r3, r3, #1
LS r3, #6                            // r3 = mem[64]
LW r3, r3                               // loads counter index

ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3
ADD r3, r3, #3      
ADD r3, r3, #1                      // Adds 31 to address
STR r0, r3

RS r3, #8
ADD r3, r3, #1
LS r3, #6                            // r3 = mem[64]
LW r3, r3                           // loads counter index
ADD r3, r3, #2                      // increments index

RS r1, #8
ADD r1, r1, #1
LS r1, #6                       // r1 = mem[64]
STR r3, r1                      // update counter

RS r2, #8
ADD r2, r2, #1 
LS r2, #2
ADD r2, r2, #3
LS r2, #2
ADD r2, r2, #2                  // r2 = 30

RS r1, #8                       // access 0 index of LUT

BNE r3, r2, r1